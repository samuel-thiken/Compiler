#! /bin/bash

# @author R

# Tests effectués :
# 1. decac -v (...) fichiers ne doit rien afficher si il n'y a pas d'erreur
# 2. decac -p -> décompile -> on lance un test possédant une sortie ,
#                             on le décompile et on compare les deux sorties
# 3. decac -P -> compiler plusieurs énormes fichiers et regarder les temps pour
#                savoir si la compilation a bien eu lieu en parallèle

DECAC_HOME=$(cd "$(dirname "$0")"/../../../../ && pwd)
OUTPUT="$DECAC_HOME"/src/test/script/output

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[1;34m'
NC='\033[0m'

if [[ ! -d "$OUTPUT/compile/" ]]; then
    mkdir -p "$OUTPUT/compile/"
fi

# VERIFY
verify_tests() {
    echo ""
    echo -e "${BLUE}---------------------------------------"
    if [ "$1" = "valid" ]; then
        echo -e "         TEST VERIFY VALID FILES              "
    else
        echo -e "        TEST VERIFY INVALID FILES             "
    fi
    echo -e "---------------------------------------${NC}"

    for i in "$DECAC_HOME"/src/test/deca/compile/"$1"/*.deca; do

        name=$(basename "$i")

        if [ ! "$name" = "*.deca" ]; then
            ((t = t + 1))

            resultat=$("$DECAC_HOME"/src/main/bin/decac -v "$i" >"$OUTPUT"/error_message.output 2>&1)
            exit_code=$?
            rm "$OUTPUT"/error_message.output

            if [[ "$1" = "valid" ]]; then
                # Si on a un test valide, on veut que la sortie n'affiche rien avec -v
                if [[ $exit_code -eq 0 ]]; then
                    echo -e "   ${GREEN}CORRECT EXECUTION${NC}"
                else
                    echo -e "   ${RED}EXECUTION FAILED${NC}"
                    echo "${i}"
                    ((f = f + 1))
                fi
            elif [[ "$1" = "invalid" ]]; then
                # Si on a un test invalide, on veut que la sortie affiche quelque chose
                if [[ $exit_code -eq 0 ]]; then
                    echo -e "   ${RED}EXECUTION FAILED${NC}"
                    echo "${i}"
                    ((f = f + 1))
                else
                    echo -e "   ${GREEN}CORRECT EXECUTION${NC}"
                fi
            else
                echo -e "   ${RED} INVALID PARAMETER${NC}"
            fi
        else
            echo "No test files"
        fi
    done
}

# PARALLEL TESTS
parallel_tests() {
    echo ""
    echo -e "${BLUE}---------------------------------------"
    echo -e "         TEST COMPILE PARALLEL FILES              "
    echo -e "---------------------------------------${NC}"
    t0=$(date +%s%N)
    for i in "$DECAC_HOME"/src/test/deca/compile/big/*.deca; do
        "$DECAC_HOME"/src/main/bin/decac "$i"
    done
    t1=$(date +%s%N)

    rm -f "$DECAC_HOME"/src/test/deca/compile/big/*.ass

    t2=$(date +%s%N)
    "$DECAC_HOME"/src/main/bin/decac -P "$DECAC_HOME"/src/test/deca/compile/big/*.deca
    t3=$(date +%s%N)

    rm -f "$DECAC_HOME"/src/test/deca/compile/big/*.ass

    normalTime=$(expr $t1 - $t0)
    parallelTime=$(expr $t3 - $t2)
    factor=$(expr $normalTime / $parallelTime)

    echo "Temps (ns) pour la compilation en série : ${normalTime}"
    echo "Temps (ns) pour la compilation en parallèle : ${parallelTime}"
    echo "Facteur : ${factor}"
}

# DECOMPILE TESTS
decompile_tests() {
    echo ""
    echo -e "${BLUE}---------------------------------------"
    echo -e "         TEST DECOMPILES FILES              "
    echo -e "---------------------------------------${NC}"
    for i in "$DECAC_HOME"/src/test/deca/codegen/valid/provided/*.deca "$DECAC_HOME"/src/test/deca/codegen/valid/without_class/*.deca "$DECAC_HOME"/src/test/deca/codegen/valid/class/*.deca; do
        ((t = t + 1))

        # On calcule la sortie du fichier de test
        "$DECAC_HOME"/src/main/bin/decac "$i"
        mv "${i%.deca}".ass "$OUTPUT"/compile/
        name=$(basename "$i")
        result=$(ima "$OUTPUT"/compile/"${name%.deca}".ass)

        # On décompile le fichier de test
        "$DECAC_HOME"/src/main/bin/decac -p "$i" >"${i%.deca}"-decompiled.deca
        mv "${i%.deca}"-decompiled.deca "$OUTPUT"/compile/
        "$DECAC_HOME"/src/main/bin/decac "$OUTPUT"/compile/"${name%.deca}"-decompiled.deca
        result2=$(ima "$OUTPUT"/compile/"${name%.deca}"-decompiled.ass)

        if [ "$result" = "$result2" ]; then
            echo -e "   ${GREEN}CORRECT EXECUTION${NC}"
        else
            echo -e "   ${RED}WRONG OUTPUT${NC}"
            ((f = f + 1))
            echo "$i"
            echo "${RED}Expected output :${NC} ${result}"
            echo "${RED}Output :${NC} ${result2}"
            echo "---"
        fi

    done

}

options_tests() {
    echo ""
    echo -e "${BLUE}---------------------------------------"
    echo -e "         TEST COMPILER OPTIONS           "
    echo -e "---------------------------------------${NC}"
    output=$("$DECAC_HOME"/src/main/bin/decac)
    expected_output="decac [[-p | -v] [-n] [-r X] [-d]* [-P] <fichier deca>...] | [-b]"
    ((t = t + 1))
    if [ "$output" = "$expected_output" ]; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Expected output: ${NC} ${expected_output} "
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    output=$("$DECAC_HOME"/src/main/bin/decac -b)
    expected_output="gl20"
    ((t = t + 1))
    if [ "$output" = "$expected_output" ]; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Expected output: ${NC} ${expected_output} "
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    output=$("$DECAC_HOME"/src/main/bin/decac -b $DECAC_HOME/src/test/deca/compile/valid/hello_world.deca)
    expected_output="Impossible to call decac -b with other arguments"
    ((t = t + 1))
    if [ "$output" = "$expected_output" ]; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Expected output: ${NC} ${expected_output} "
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    output=$("$DECAC_HOME"/src/main/bin/decac -p -v)
    expected_output="Impossible to use -p and -v simultaneously"
    ((t = t + 1))
    if [ "$output" = "$expected_output" ]; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Expected output: ${NC} ${expected_output} "
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    output=$("$DECAC_HOME"/src/main/bin/decac -r 25 $DECAC_HOME/src/test/deca/compile/valid/hello_world.deca)
    expected_output="Impossible to use more than 16 registers"
    ((t = t + 1))
    if [ "$output" = "$expected_output" ]; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Expected output: ${NC} ${expected_output} "
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    output=$("$DECAC_HOME"/src/main/bin/decac -r $DECAC_HOME/src/test/deca/compile/valid/hello_world.deca 5)
    expected_output="Invalid position of X in -r X option"
    ((t = t + 1))
    if [ "$output" = "$expected_output" ]; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Expected output: ${NC} ${expected_output} "
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    "$DECAC_HOME"/src/main/bin/decac -P "$DECAC_HOME"/src/test/deca/compile/invalid/parallel_fail.deca "$DECAC_HOME"/src/test/deca/compile/valid/hello_world.deca >"$OUTPUT"/error_message.output 2>&1
    exit_code=$?
    rm "$OUTPUT"/error_message.output
    ((t = t + 1))
    if [[ $exit_code -eq 1 ]]; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} -P should not work when one file can't compile !!"
    fi

    for X in $(seq 4 16); do
        file="$DECAC_HOME"/src/test/deca/compile/options/register_use_$X.deca
        "$DECAC_HOME"/src/main/bin/decac -r $X $file
        mv "${file%.deca}".ass "$OUTPUT"/compile/
        register_file="$OUTPUT"/compile/register_use_$X.ass
        ((t = t + 1))
        # 0 if valid test, 1 if invalid test
        valid=0
        for Y in $(seq $((X + 1)) 16); do
            if grep -q "R$Y" $register_file; then
                valid=1
                break
            fi
        done
        if [ valid=0 ]; then
            echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
        else
            ((f = f + 1))
            echo -e "${RED} WRONG EXECUTION${NC} FOR -X = ${X}"
        fi

    done

    output=$("$DECAC_HOME"/src/main/bin/decac -d $DECAC_HOME/src/test/deca/compile/valid/hello_world.deca)
    info="INFO"
    ((t = t + 1))
    if grep -q "$info" <<<"$output"; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Expected output: ${NC} ${expected_output} "
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    output=$("$DECAC_HOME"/src/main/bin/decac -d -d $DECAC_HOME/src/test/deca/compile/valid/hello_world.deca)
    ((t = t + 1))
    if grep -q "$debug" <<<"$output"; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    output=$("$DECAC_HOME"/src/main/bin/decac -d -d -d $DECAC_HOME/src/test/deca/compile/valid/hello_world.deca)
    trace="TRACE"
    ((t = t + 1))
    if grep -q "$trace" <<<"$output"; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    output=$("$DECAC_HOME"/src/main/bin/decac -d -d -d -d $DECAC_HOME/src/test/deca/compile/valid/hello_world.deca)
    ((t = t + 1))
    if grep -q "$trace" <<<"$output"; then
        echo -e "${GREEN}CORRECT EXECUTIONS${NC}"
    else
        ((f = f + 1))
        echo -e "${RED} Output: ${NC} ${output} "
    fi

    file="$DECAC_HOME"/src/test/deca/compile/options/error_generation.deca
    "$DECAC_HOME"/src/main/bin/decac -n $file
    mv "${file%.deca}".ass "$OUTPUT"/compile/
    register_file="$OUTPUT"/compile/error_generation.ass

    ((t = t + 1))
    if grep -q "Division by zero" $register_file; then
        echo -e "${RED} INCORRECT ${NC} Division by 0"
        ((f = f + 1))
    else
        echo -e "${GREEN} CORRECT"
    fi

    ((t = t + 1))
    if grep -q "Division by zero" $register_file; then
        echo -e "${RED} INCORRECT ${NC} Modulo by 0"
        ((f = f + 1))
    else
        echo -e "${GREEN} CORRECT"
    fi

    ((t = t + 1))
    if grep -q "Number overflow" $register_file; then
        echo -e "${RED} INCORRECT ${NC} Number overflow"
        ((f = f + 1))
    else
        echo -e "${GREEN} CORRECT"
    fi

    ((t = t + 1))
    if grep -q "Invalid input" $register_file; then
        echo -e "${RED} INCORRECT ${NC} Invalid input"
        ((f = f + 1))
    else
        echo -e "${GREEN} CORRECT"
    fi

    ((t = t + 1))
    if grep -q "Stack overflow" $register_file; then
        echo -e "${RED} INCORRECT ${NC} Stack overflow"
        ((f = f + 1))
    else
        echo -e "${GREEN} CORRECT"
    fi

}

# MAIN
exec_tests() {
    # verify_tests valid
    # verify_tests invalid
    decompile_tests
    # parallel_tests
    # options_tests
}

clean() {
    rm -f "$DECAC_HOME"/src/test/deca/compile/big/*.ass
    rm -r "$OUTPUT"/compile/
}

if [ "$1" = "clean" ]; then
    clean
elif [ ! "$1" ]; then
    t=0 # Number of tests
    f=0 # Number of tests failed
    echo -e "Compile test start"
    exec_tests
    s=0
    ((s = t - f))
    echo ""
    echo -e "Total tests : $t - ${GREEN}Succeed : $s ${NC}- ${RED}Failed : $f${NC}"
fi
