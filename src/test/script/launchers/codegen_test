#! /bin/bash

DECAC_HOME=$(cd "$(dirname "$0")"/../../../../ && pwd)
OUTPUT="$DECAC_HOME"/src/test/script/output
INPUT="$DECAC_HOME"/src/test/script/input
RESULT="$DECAC_HOME"/src/test/script/expected

# Creation of test outputs directory if they don't exist
if [[ ! -d "$OUTPUT/codegen/valid/" ]]; then
    mkdir -p "$OUTPUT/codegen/valid/"
fi
if [[ ! -d "$OUTPUT/codegen/invalid/" ]]; then
    mkdir -p "$OUTPUT/codegen/invalid/"
fi
if [[ ! -d "$OUTPUT/codegen/interactive/" ]]; then
    mkdir -p "$OUTPUT/codegen/interactive/"
fi
if [[ ! -d "$OUTPUT/ima/valid/" ]]; then
    mkdir -p "$OUTPUT/ima/valid/"
fi
if [[ ! -d "$OUTPUT/ima/invalid/" ]]; then
    mkdir -p "$OUTPUT/ima/invalid/"
fi
if [[ ! -d "$OUTPUT/ima/interactive/" ]]; then
    mkdir -p "$OUTPUT/ima/interactive/"
fi

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[1;34m'
NC='\033[0m' # No Color

test_error() {

    output=$(cat $3)
    if [[ -f "$RESULT"/${4%.deca}.expected ]]; then
        expected=$(cat "$RESULT/${4%.deca}.expected")
        if [[ "$expected" = "$output" ]]; then 
            echo 0
        else 
            echo 1
        fi
    else

        result_line=$(cat $2| grep -Fn "// Resultats:" | cut --delimiter=":" --fields=1)
        if [ ! $result_line ]; then
            result_line=$(cat $2| grep -Fn "// Result:" | cut --delimiter=":" --fields=1)
        fi
        ((result_line = result_line + 1))

        result=$(sed "${result_line}q;d" "$2")
        result=$(echo $result | cut -c 4-)

        if [ "$1" != "invalid" ]; then
            if [ "$result" = "$output" ]; then
                echo 0
            else
                echo 1
            fi
        else
            ((result_line = result_line + 1))
            line=$(sed "${result_line}q;d" "$2")
            line=$(echo $line | cut -c 9-)

            if echo "$output" | grep -q "$2:$line:[0-9]\+: $result"; then
                echo 0
            else
                echo 1
            fi
        fi
    fi

}

exec_tests() {
    echo ""
    echo -e "${BLUE}---------------------------------------"
    if [ "$1" = "valid" ]; then
        echo -e "         TEST VALID FILES              "
    elif [ "$1" = "invalid" ]; then
        echo -e "        TEST INVALID FILES             "
    else
        echo -e "         INTERACTIVE TEST              "
    fi
    echo -e "---------------------------------------${NC}"
    for i in "$DECAC_HOME"/src/test/deca/codegen/"$1"/class/*.deca "$DECAC_HOME"/src/test/deca/codegen/"$1"/without_class/*.deca; do

        name=$(basename "$i")

        if [ ! "$name" = "*.deca" ]; then

            correct=0
            # Boucle pour le nombre de registres utilisÃ©s
            echo -n "$name ...."
            for X in `seq 4 16`; do
                ((t = t + 1))
                "$DECAC_HOME"/src/main/bin/decac "$i" -r "$X" > "$OUTPUT"/ima/$1/"${name%.deca}"-$X.lis 2>&1

                # Test failed or succeed
                if [ $? -eq 0 ]; then
                    mv "${i%.deca}".ass "$OUTPUT"/codegen/"$1"/"${name%.deca}-$X.ass"
                    # echo -e "$name - ${GREEN}COMPILATION SUCCEED${NC}"
                    if [ $1 = "interactive" ]; then
                        ima "$OUTPUT"/codegen/$1/"${name%.deca}"-$X.ass <"$INPUT"/"${name%.deca}".input >"$OUTPUT"/ima/$1/"${name%.deca}"-$X.res 2>&1
                    else
                        ima "$OUTPUT"/codegen/$1/"${name%.deca}"-$X.ass >"$OUTPUT"/ima/$1/"${name%.deca}"-$X.res 2>&1
                    fi
                    exit_code=$?
                    test=$(test_error $1 $i "$OUTPUT"/ima/"$1"/"${name%.deca}"-$X.res $name) 
                    if [[ $exit_code -eq 0 && "$1" != "invalid" ]] || [[ $exit_code -eq 1 && "$1" = "invalid" ]]; then
                        if [ $test -eq 0 ]; then
                            # echo -e "   ${GREEN}CORRECT EXECUTION${NC}"
                            echo -e -n "${GREEN}.${NC}"
                            correct=$((correct + 1))
                        else
                            echo -e -n "${RED}.${NC}"
                            # echo -e "   ${RED}EXECUTION FAILED${NC} - $X registers"
                            # echo -e "    ${YELLOW}$OUTPUT/codegen/$1/${name%.deca}-$X.ass and $OUTPUT/ima/$1/${name%.deca}-$X.res to see the error message${NC}"
                            ((f = f + 1))
                        fi
                    else
                        echo -e -n "${RED}.${NC}"
                        # echo -e "   ${RED}EXECUTION FAILED${NC} - $X registers"
                        # echo -e "    ${YELLOW}$OUTPUT/codegen/$1/${name%.deca}-$X.ass and $OUTPUT/ima/$1/${name%.deca}-$X.res to see the error message${NC}"
                        ((f = f + 1))
                    fi
                else
                    echo -e -n "${RED}.${NC}"
                    # echo -e "$name - ${RED}COMPILATION FAILED${NC} - $X registers"
                    # echo -e "    ${YELLOW}$DECAC_HOME/src/test/script/output/codegen/$1/${name%.deca}-$X.ass to see the error message${NC}"
                    ((f = f + 1))
                fi
            done
            
            if [[ $correct = 13 ]]; then
                echo -e " - ${GREEN}CORRECT EXECUTION${NC}"
            else
                echo -e " - ${RED}EXECUTION FAILED${NC}"
                echo -e "    ${YELLOW}$DECAC_HOME/src/test/script/output/ima/$1/${name%.deca}-$X.lis to see the error message${NC}"
                echo -e "    ${YELLOW}$DECAC_HOME/src/test/script/output/codegen/$1/${name%.deca}-$X.ass to see the generated assembly${NC}"
                echo -e "    ${YELLOW}$DECAC_HOME/src/test/script/output/ima/$1/${name%.deca}-$X.res to see the result${NC}"
            fi
        else
            echo "No test files"
        fi
        # break
    done
}

if [ ! "$1" ]; then

    t=0 # Number of tests
    f=0 # Number of tests failed

    echo ""
    echo "executable: decac"

    exec_tests valid

    exec_tests invalid

    exec_tests interactive

    s=0
    ((s = t - f))
    echo ""
    echo -e "Total tests : $t - ${GREEN}Succeed : $s ${NC}- ${RED}Failed : $f${NC}"

else
    echo "Error argument : you don't have to put any argument."
    exit 1
fi
