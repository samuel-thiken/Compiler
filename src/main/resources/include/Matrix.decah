// Définition de la classe des matrices
// Définition des opérations possibles sur les matrices

class Matrix {

    /**
    * Initialize a matrix with zeros
    */
    float[][] initMatrixZeros(int lineNumber, int columnNumber) {
        float[lineNumber][columnNumber] matrix;
        int i = 0;
        int j;
        while (i < lineNumber) {
            j = 0;
            while (j < columnNumber) {
                matrix[i][j] = 0;
                j = j + 1;
            }
            i = i + 1;
        }
        return matrix;
    }
    


    boolean isMatricesEqual(float[][] tab1, int nbLines1, int nbCol1, float[][] tab2, int nbLines2, int nbCol2) {
        int lines = 0;
        int col = 0;
        if (nbLines1 != nbLines2 || nbCol1 != nbCol2) {
            return false;
        }
        while (lines < nbLines1) {
            while (col < nbCol1) {
                if (tab1[lines][col] != tab2[lines][col]) {
                    return false;
                }
                col = col + 1;
            }
            lines = lines + 1;
        }
        return true;
    }

    /**
    * Returns the matrix which is the addition of a matrices A and B.
    * Prerequisite : A and B MUST have the same shape.
    */
    float[][] add(float[][] A, int nblineA, int nbcolumnA, float[][] B, int nblineB, int nbcolumnB) {
        float[nblineA][nbcolumnA] res;
        int i = 0;
        int j;
        while (i < nblineA) {
            j = 0;
            while (j < nbcolumnA) {
                res[i][j] = A[i][j] + B[i][j];
                j = j + 1;
            }
            i = i + 1;
        }
        return res;
    }

    /**
    * Multiplies each element of the matrix with the given parameter k
    */
    float[][] multScal(float k, float[][] A, int nblineA, int nbcolumnA) {
        float[nblineA][nbcolumnA] res;
        int i = 0;
        int j;
        while (i < nblineA) {
            j = 0;
            while (j < nbcolumnA) {
                res[i][j] = k * A[i][j];
                j = j + 1;
            }
            i = i + 1;
        }
        return res;
    }

    /**
    * Returns a matrix in which each coefficient is the multiplication of coefficient of A and B
    * at the same position.
    * Prerequisite : A and B MUST have the same shape.
    */
    float[][] multCoef(float[][] A, int nblineA, int nbcolumnA, float[][] B, int nblineB, int nbcolumnB) {
        float[nblineA][nbcolumnA] res;
        int i = 0;
        int j;
        while (i < nblineA) {
            j = 0;
            while (j < nbcolumnA) {
                res[i][j] = A[i][j] * B[i][j];
                j = j + 1;
            }
            i = i + 1;
        }
        return res;
    }

    /**
    * Returns a matrix which is the multiplication of matrices A and B.
    * Prerequisite : The number of columns of A MUST be the same as the number of lines of B.
    */
    float[][] multMat(float[][] A, int nblineA, int nbcolumnA, float[][] B, int nblineB, int nbcolumnB) {
        float[nblineA][nbcolumnB] res;
        int i = 0;
        int j;
        int k;
        while (i < nblineA) {
            j = 0;
            while (j < nbcolumnB) {
                k = 0;
                while (k < nblineB) {
                    res[i][j] = res[i][j] +  A[i][k] * B[k][j];
                    k = k + 1;
                }
                j = j + 1;
            }
            i = i + 1;
        }
        return res;
    }

    /**
    * Returns the transpose matrix of the given matrix A.
    */
    float[][] transposee(float[][] A, int nblineA, int nbcolumnA) {
        float[nbcolumnA][nblineA] res;
        int i = 0;
        int j;
        while (i < nblineA) {
            j = 0;
            while (j < nbcolumnA) {
                res[j][i] = A[i][j];
                j = j + 1;
            }
            i = i + 1;
        }
        return res;
    }

    /**
    * Print the given matrix A.
    */
    void printMatrix(float[][] A, int nbLine, int nbCol) {  
        int i = 0;
        int j;
        print("[ ");
        while (i < nbLine) {
            j = 0;
            while (j < nbCol) {
                if (j == nbCol - 1 && i == nbLine - 1) {
                    print(A[i][j], " ]");    
                }
                else if (j == nbCol - 1 && i != nbLine -1) {
                    print(A[i][j], "] ");
                }
                else {
                    print(A[i][j], ", ");
                }
                j = j + 1;
            }
            i = i + 1;
        }
        print("]");
    }
}